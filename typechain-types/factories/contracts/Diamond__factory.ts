/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../common";
import type { Diamond, DiamondInterface } from "../../contracts/Diamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_diamondCutFacet",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405260405161101138038061101183398101604081905261002291610bd4565b61002b82610136565b604080516001808252818301909252600091816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816100425750506040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b816000815181106100b1576100b1610c07565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b038516815290810160008152602001828152508260008151811061010157610101610c07565b602002602001018190525061012d826000604051806020016040528060008152506101b960201b60201c565b50505050610e5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b031981166001600160a01b03848116918217909355604051600080516020610f7d833981519152939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e54600080516020610f7d8339815191529061ffff8116908190600090600716156102165750600381901c60009081526001840160205260409020545b60005b87518110156102995761028c83838a848151811061023957610239610c07565b6020026020010151600001518b858151811061025757610257610c07565b6020026020010151602001518c868151811061027557610275610c07565b60200260200101516040015161032560201b60201c565b9093509150600101610219565b508282146102b55760028401805461ffff191661ffff84161790555b60078216156102d757600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67387878760405161030a93929190610c83565b60405180910390a161031c8686610acb565b50505050505050565b60008080600080516020610f7d833981519152905060008451116103a45760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b60648201526084015b60405180910390fd5b60008560028111156103b8576103b8610c1d565b03610526576103df86604051806060016040528060248152602001610f9d60249139610b97565b60005b84518110156105205760008582815181106103ff576103ff610c07565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c156104a05760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c7265616479206578697374730000000000000000000000606482015260840161039b565b6001600160e01b031980831660008181526020879052604090206001600160601b031960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a8190036105045760038c901c600090815260018601602052604081209b909b555b8b61050e81610d99565b9c5050600190930192506103e2915050565b50610abf565b600185600281111561053a5761053a610c1d565b036107365761056186604051806060016040528060288152602001610fe960289139610b97565b60005b845181101561052057600085828151811061058157610581610c07565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c3081036106165760405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b606482015260840161039b565b896001600160a01b0316816001600160a01b03160361068b5760405162461bcd60e51b81526020600482015260386024820152600080516020610f5d83398151915260448201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606482015260840161039b565b6001600160a01b0381166106f55760405162461bcd60e51b81526020600482015260386024820152600080516020610f5d83398151915260448201527f6374696f6e207468617420646f65736e27742065786973740000000000000000606482015260840161039b565b506001600160e01b031990911660009081526020849052604090206001600160601b03919091166001600160601b031960608a901b16179055600101610564565b600285600281111561074a5761074a610c1d565b03610a67576001600160a01b038616156107cc5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d757374206265206164647265737328302900000000000000000000606482015260840161039b565b600388901c6007891660005b8651811015610a475760008a900361081457826107f481610db2565b60008181526001870160205260409020549b509350600792506108229050565b8161081e81610db2565b9250505b6000806000808a858151811061083a5761083a610c07565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c6108da5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606482015260840161039b565b30606082901c036109445760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b606482015260840161039b565b600587901b8f901b94506001600160e01b031980861690831614610995576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166001600160601b0383161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e01690508582146109fa576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c179055610a1e565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b84600003610a3c57600086815260018801602052604081208190559c505b5050506001016107d8565b5080610a54836008610dc9565b610a5e9190610de6565b99505050610abf565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b606482015260840161039b565b50959694955050505050565b6001600160a01b038216610add575050565b610aff82604051806060016040528060288152602001610fc160289139610b97565b600080836001600160a01b031683604051610b1a9190610df9565b600060405180830381855af49150503d8060008114610b55576040519150601f19603f3d011682016040523d82523d6000602084013e610b5a565b606091505b509150915081610b9157805115610b745780518082602001fd5b838360405163192105d760e01b815260040161039b929190610e15565b50505050565b813b8181610b915760405162461bcd60e51b815260040161039b9190610e41565b80516001600160a01b0381168114610bcf57600080fd5b919050565b60008060408385031215610be757600080fd5b610bf083610bb8565b9150610bfe60208401610bb8565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b83811015610c4e578181015183820152602001610c36565b50506000910152565b60008151808452610c6f816020860160208601610c33565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015610d5357898403607f19018652815180516001600160a01b03168552838101518986019060038110610cf257634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015610d3e5783516001600160e01b0319168252928601926001929092019190860190610d14565b50978501979550505090820190600101610cac565b50506001600160a01b038a16908801528681036040880152610d758189610c57565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610dab57610dab610d83565b5060010190565b600081610dc157610dc1610d83565b506000190190565b8082028115828204841417610de057610de0610d83565b92915050565b80820180821115610de057610de0610d83565b60008251610e0b818460208701610c33565b9190910192915050565b6001600160a01b0383168152604060208201819052600090610e3990830184610c57565b949350505050565b602081526000610e546020830184610c57565b9392505050565b60f480610e696000396000f3fe608060405236600a57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604090912054819060601c80609b5760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374604482015260640160405180910390fd5b3660008037600080366000845af43d6000803e80801560b9573d6000f35b3d6000fdfea2646970667358221220aaf0ff21fec337062229eca2e2324ac6dcd490f563f9ee9c3c031197b9b4be6964736f6c634300081400334c69624469616d6f6e644375743a2043616e2774207265706c6163652066756ec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465";

type DiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Diamond__factory extends ContractFactory {
  constructor(...args: DiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _contractOwner: AddressLike,
    _diamondCutFacet: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    );
  }
  override deploy(
    _contractOwner: AddressLike,
    _diamondCutFacet: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    ) as Promise<
      Diamond & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Diamond__factory {
    return super.connect(runner) as Diamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInterface {
    return new Interface(_abi) as DiamondInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Diamond {
    return new Contract(address, _abi, runner) as unknown as Diamond;
  }
}
