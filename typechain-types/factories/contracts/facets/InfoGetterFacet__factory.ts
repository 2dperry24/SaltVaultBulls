/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  InfoGetterFacet,
  InfoGetterFacetInterface,
} from "../../../contracts/facets/InfoGetterFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getBullInformation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreTeamBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreTeamWalletAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGemTokenChallengeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rarity",
        type: "uint256",
      },
    ],
    name: "getMintCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProcurementWalletAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rarity",
        type: "uint256",
      },
    ],
    name: "getRarityInformationForBull",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoyaltiesWalletAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSaltVaultTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalRewardBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUsdcContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultCouncilBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultHoldingBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061039d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063621e47b61161008c578063aced84c111610066578063aced84c11461026b578063b577f04a1461027c578063e465085a1461028d578063f7c8a48c1461029e57600080fd5b8063621e47b61461023657806399b4d07d1461023e578063ab9ca2a71461024657600080fd5b8063301f4544116100c8578063301f45441461015f5780633327c1bd14610167578063513655ff146101c057806352e928fc146101c857600080fd5b80630c509436146100ef57806321707951146101255780632a55205a1461012d575b600080fd5b6101126100fd3660046102df565b6000908152601f602052604090206001015490565b6040519081526020015b60405180910390f35b600a54610112565b61014061013b3660046102f8565b6102af565b604080516001600160a01b03909316835260208301919091520161011c565b600c54610112565b6101a06101753660046102df565b6000908152601f60205260409020600181015460028201546003830154600490930154919390929190565b60408051948552602085019390935291830152606082015260800161011c565b600954610112565b6102096101d63660046102df565b60009081526020805260409020805460018201546002830154600384015460048501546005909501549395929491939092565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161011c565b600854610112565b600b54610112565b6001546001600160a01b03165b6040516001600160a01b03909116815260200161011c565b6003546001600160a01b0316610253565b6004546001600160a01b0316610253565b6000546001600160a01b0316610253565b6002546001600160a01b0316610253565b60008060646102bf84600561031a565b6102c99190610345565b6003546001600160a01b03169590945092505050565b6000602082840312156102f157600080fd5b5035919050565b6000806040838503121561030b57600080fd5b50508035926020909101359150565b808202811582820484141761033f57634e487b7160e01b600052601160045260246000fd5b92915050565b60008261036257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212208398de08c33cd94c737f9f3643b43345038d6b24d0fd21d2c5aa4fbe708fe03364736f6c63430008140033";

type InfoGetterFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InfoGetterFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InfoGetterFacet__factory extends ContractFactory {
  constructor(...args: InfoGetterFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      InfoGetterFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): InfoGetterFacet__factory {
    return super.connect(runner) as InfoGetterFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InfoGetterFacetInterface {
    return new Interface(_abi) as InfoGetterFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InfoGetterFacet {
    return new Contract(address, _abi, runner) as unknown as InfoGetterFacet;
  }
}
