/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace SvbGemStones {
  export type GemTokenStruct = {
    index: BigNumberish;
    value: BigNumberish;
    color: string;
  };

  export type GemTokenStructOutput = [
    index: bigint,
    value: bigint,
    color: string
  ] & { index: bigint; value: bigint; color: string };
}

export interface SvbGemStonesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TOTAL_SUPPLY"
      | "_initializeFreeMints"
      | "addShuffledIndexesBatch"
      | "approve"
      | "balanceOf"
      | "bulkPopulateTokens"
      | "burnAndClaimSpot"
      | "checkClaimEligibility"
      | "checkIfWinner"
      | "checkTokenScore"
      | "depositRewardsForGame"
      | "diamondAddress"
      | "freeMintsAvailable"
      | "freeMintsInitialized"
      | "gameStartDate"
      | "gemTokens"
      | "getApproved"
      | "getAvailableFreeMints"
      | "getGemToken"
      | "getPayoutDistribution"
      | "getPriceForAdditionalMints"
      | "getShuffledIndexesLength"
      | "getWalletTokenValues"
      | "getWinners"
      | "hasClaimedFreeMints"
      | "isApprovedForAll"
      | "isGameActive"
      | "isGameOpen"
      | "maxMintsPerTx"
      | "maxMintsPerWallet"
      | "mintCost"
      | "mintLive"
      | "mintWithCredits"
      | "mintWithUSDC"
      | "name"
      | "nftMintsPerWallet"
      | "numberOfWinningSpots"
      | "onERC721Received"
      | "owner"
      | "ownerOf"
      | "payoutDistribution"
      | "primaryColor"
      | "primaryColorWindow"
      | "renounceOwnership"
      | "rewardBalance"
      | "royaltiesSafe"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "saltVaultBulls"
      | "saltVaultToken"
      | "setApprovalForAll"
      | "setContractAddresses"
      | "setGameActive"
      | "setGameParameters"
      | "setMintCost"
      | "setMintStatus"
      | "setPrimaryColorWindow"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenSupply"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "usdcTokenContract"
      | "validColors"
      | "walletOfOwner"
      | "winners"
      | "winningValue"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "MintedWithCredits"
      | "OwnershipTransferred"
      | "SetMintStatus"
      | "Transfer"
      | "USDCMint"
      | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_initializeFreeMints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addShuffledIndexesBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkPopulateTokens",
    values: [BigNumberish[][], string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndClaimSpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaimEligibility",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfWinner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTokenScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewardsForGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintsAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintsInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gemTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableFreeMints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGemToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceForAdditionalMints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShuffledIndexesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletTokenValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedFreeMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintsPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintsPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintCost", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintLive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintWithCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithUSDC",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftMintsPerWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfWinningSpots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "primaryColor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryColorWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesSafe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "saltVaultBulls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saltVaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAddresses",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameParameters",
    values: [BigNumberish, string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryColorWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "validColors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "walletOfOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "winningValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initializeFreeMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addShuffledIndexesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkPopulateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndClaimSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkClaimEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTokenScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewardsForGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeMintsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeMintsInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gemTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableFreeMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceForAdditionalMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShuffledIndexesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletTokenValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedFreeMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGameOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMintsPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftMintsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfWinningSpots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryColorWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saltVaultBulls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saltVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryColorWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validColors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedWithCreditsEvent {
  export type InputTuple = [account: AddressLike, totalMints: BigNumberish];
  export type OutputTuple = [account: string, totalMints: bigint];
  export interface OutputObject {
    account: string;
    totalMints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMintStatusEvent {
  export type InputTuple = [setter: AddressLike, mintState: boolean];
  export type OutputTuple = [setter: string, mintState: boolean];
  export interface OutputObject {
    setter: string;
    mintState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCMintEvent {
  export type InputTuple = [
    minter: AddressLike,
    quantity: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    minter: string,
    quantity: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    minter: string;
    quantity: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [winner: AddressLike, totalValue: BigNumberish];
  export type OutputTuple = [winner: string, totalValue: bigint];
  export interface OutputObject {
    winner: string;
    totalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SvbGemStones extends BaseContract {
  connect(runner?: ContractRunner | null): SvbGemStones;
  waitForDeployment(): Promise<this>;

  interface: SvbGemStonesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  _initializeFreeMints: TypedContractMethod<[], [void], "nonpayable">;

  addShuffledIndexesBatch: TypedContractMethod<
    [batch: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bulkPopulateTokens: TypedContractMethod<
    [tokenData: BigNumberish[][], color: string],
    [void],
    "nonpayable"
  >;

  burnAndClaimSpot: TypedContractMethod<[], [void], "nonpayable">;

  checkClaimEligibility: TypedContractMethod<
    [_address: AddressLike, _quantity: BigNumberish],
    [string],
    "view"
  >;

  checkIfWinner: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  checkTokenScore: TypedContractMethod<
    [],
    [
      [bigint, bigint] & { primaryColorPoints: bigint; pointsAllColors: bigint }
    ],
    "view"
  >;

  depositRewardsForGame: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  diamondAddress: TypedContractMethod<[], [string], "view">;

  freeMintsAvailable: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  freeMintsInitialized: TypedContractMethod<[], [boolean], "view">;

  gameStartDate: TypedContractMethod<[], [bigint], "view">;

  gemTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & { index: bigint; value: bigint; color: string }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getAvailableFreeMints: TypedContractMethod<
    [holder: AddressLike],
    [bigint],
    "view"
  >;

  getGemToken: TypedContractMethod<
    [tokenIndex: BigNumberish],
    [[bigint, bigint, string]],
    "view"
  >;

  getPayoutDistribution: TypedContractMethod<[], [bigint[]], "view">;

  getPriceForAdditionalMints: TypedContractMethod<
    [_address: AddressLike, _quantity: BigNumberish],
    [bigint],
    "view"
  >;

  getShuffledIndexesLength: TypedContractMethod<[], [bigint], "view">;

  getWalletTokenValues: TypedContractMethod<
    [],
    [SvbGemStones.GemTokenStructOutput[]],
    "view"
  >;

  getWinners: TypedContractMethod<[], [string[]], "view">;

  hasClaimedFreeMints: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isGameActive: TypedContractMethod<[], [boolean], "view">;

  isGameOpen: TypedContractMethod<[], [boolean], "view">;

  maxMintsPerTx: TypedContractMethod<[], [bigint], "view">;

  maxMintsPerWallet: TypedContractMethod<[], [bigint], "view">;

  mintCost: TypedContractMethod<[], [bigint], "view">;

  mintLive: TypedContractMethod<[], [boolean], "view">;

  mintWithCredits: TypedContractMethod<[], [void], "nonpayable">;

  mintWithUSDC: TypedContractMethod<
    [_address: AddressLike, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nftMintsPerWallet: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  numberOfWinningSpots: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  payoutDistribution: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  primaryColor: TypedContractMethod<[], [string], "view">;

  primaryColorWindow: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardBalance: TypedContractMethod<[], [bigint], "view">;

  royaltiesSafe: TypedContractMethod<[], [string], "view">;

  royaltyInfo: TypedContractMethod<
    [_tokenId: BigNumberish, _salePrice: BigNumberish],
    [[string, bigint] & { royaltyAmount: bigint }],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  saltVaultBulls: TypedContractMethod<[], [string], "view">;

  saltVaultToken: TypedContractMethod<[], [string], "view">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setContractAddresses: TypedContractMethod<
    [
      _saltVaultBulls: AddressLike,
      _saltVaultToken: AddressLike,
      _usdcAddress: AddressLike,
      _royaltiesAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setGameActive: TypedContractMethod<
    [_isGameActive: boolean],
    [void],
    "nonpayable"
  >;

  setGameParameters: TypedContractMethod<
    [
      _winningValue: BigNumberish,
      _primaryColor: string,
      _numberOfWinningSpots: BigNumberish,
      _payoutDistribution: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setMintCost: TypedContractMethod<
    [_newMintCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintStatus: TypedContractMethod<
    [_mintLive: boolean],
    [void],
    "nonpayable"
  >;

  setPrimaryColorWindow: TypedContractMethod<
    [_newWindow: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenSupply: TypedContractMethod<[], [bigint], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcTokenContract: TypedContractMethod<[], [string], "view">;

  validColors: TypedContractMethod<[arg0: string], [boolean], "view">;

  walletOfOwner: TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;

  winners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  winningValue: TypedContractMethod<[], [bigint], "view">;

  withdrawToken: TypedContractMethod<
    [_tokenContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_initializeFreeMints"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addShuffledIndexesBatch"
  ): TypedContractMethod<[batch: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bulkPopulateTokens"
  ): TypedContractMethod<
    [tokenData: BigNumberish[][], color: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnAndClaimSpot"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkClaimEligibility"
  ): TypedContractMethod<
    [_address: AddressLike, _quantity: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIfWinner"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkTokenScore"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & { primaryColorPoints: bigint; pointsAllColors: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositRewardsForGame"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "diamondAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freeMintsAvailable"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "freeMintsInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameStartDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gemTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & { index: bigint; value: bigint; color: string }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAvailableFreeMints"
  ): TypedContractMethod<[holder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGemToken"
  ): TypedContractMethod<
    [tokenIndex: BigNumberish],
    [[bigint, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPayoutDistribution"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPriceForAdditionalMints"
  ): TypedContractMethod<
    [_address: AddressLike, _quantity: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getShuffledIndexesLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletTokenValues"
  ): TypedContractMethod<[], [SvbGemStones.GemTokenStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getWinners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasClaimedFreeMints"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isGameActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGameOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxMintsPerTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMintsPerWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintLive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintWithCredits"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintWithUSDC"
  ): TypedContractMethod<
    [_address: AddressLike, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftMintsPerWallet"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfWinningSpots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "payoutDistribution"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "primaryColor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primaryColorWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltiesSafe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _salePrice: BigNumberish],
    [[string, bigint] & { royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "saltVaultBulls"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "saltVaultToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractAddresses"
  ): TypedContractMethod<
    [
      _saltVaultBulls: AddressLike,
      _saltVaultToken: AddressLike,
      _usdcAddress: AddressLike,
      _royaltiesAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameActive"
  ): TypedContractMethod<[_isGameActive: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameParameters"
  ): TypedContractMethod<
    [
      _winningValue: BigNumberish,
      _primaryColor: string,
      _numberOfWinningSpots: BigNumberish,
      _payoutDistribution: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintCost"
  ): TypedContractMethod<[_newMintCost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintStatus"
  ): TypedContractMethod<[_mintLive: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrimaryColorWindow"
  ): TypedContractMethod<[_newWindow: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcTokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "validColors"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "walletOfOwner"
  ): TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "winners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "winningValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[_tokenContract: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "MintedWithCredits"
  ): TypedContractEvent<
    MintedWithCreditsEvent.InputTuple,
    MintedWithCreditsEvent.OutputTuple,
    MintedWithCreditsEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetMintStatus"
  ): TypedContractEvent<
    SetMintStatusEvent.InputTuple,
    SetMintStatusEvent.OutputTuple,
    SetMintStatusEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "USDCMint"
  ): TypedContractEvent<
    USDCMintEvent.InputTuple,
    USDCMintEvent.OutputTuple,
    USDCMintEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "MintedWithCredits(address,uint256)": TypedContractEvent<
      MintedWithCreditsEvent.InputTuple,
      MintedWithCreditsEvent.OutputTuple,
      MintedWithCreditsEvent.OutputObject
    >;
    MintedWithCredits: TypedContractEvent<
      MintedWithCreditsEvent.InputTuple,
      MintedWithCreditsEvent.OutputTuple,
      MintedWithCreditsEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetMintStatus(address,bool)": TypedContractEvent<
      SetMintStatusEvent.InputTuple,
      SetMintStatusEvent.OutputTuple,
      SetMintStatusEvent.OutputObject
    >;
    SetMintStatus: TypedContractEvent<
      SetMintStatusEvent.InputTuple,
      SetMintStatusEvent.OutputTuple,
      SetMintStatusEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "USDCMint(address,uint256,uint256)": TypedContractEvent<
      USDCMintEvent.InputTuple,
      USDCMintEvent.OutputTuple,
      USDCMintEvent.OutputObject
    >;
    USDCMint: TypedContractEvent<
      USDCMintEvent.InputTuple,
      USDCMintEvent.OutputTuple,
      USDCMintEvent.OutputObject
    >;

    "WinnerDeclared(address,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
