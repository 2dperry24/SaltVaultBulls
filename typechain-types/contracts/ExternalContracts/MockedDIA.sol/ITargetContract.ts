/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ITargetContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "erc20Allowance"
      | "erc20Approve"
      | "erc20BalanceOf"
      | "erc20Decimals"
      | "erc20DeployToken"
      | "erc20Name"
      | "erc20Symbol"
      | "erc20TotalSupply"
      | "erc20Transfer"
      | "mint"
      | "mintToken"
      | "updateTotalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "erc20Allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Approve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20BalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Decimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20DeployToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "erc20Name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Symbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Transfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalSupply",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20Allowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20BalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20DeployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Symbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalSupply",
    data: BytesLike
  ): Result;
}

export interface ITargetContract extends BaseContract {
  connect(runner?: ContractRunner | null): ITargetContract;
  waitForDeployment(): Promise<this>;

  interface: ITargetContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  erc20Allowance: TypedContractMethod<
    [account: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  erc20Approve: TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc20BalanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  erc20Decimals: TypedContractMethod<[], [bigint], "view">;

  erc20DeployToken: TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc20Name: TypedContractMethod<[], [string], "view">;

  erc20Symbol: TypedContractMethod<[], [string], "view">;

  erc20TotalSupply: TypedContractMethod<[], [bigint], "view">;

  erc20Transfer: TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintToken: TypedContractMethod<
    [token: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTotalSupply: TypedContractMethod<
    [from: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "erc20Allowance"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc20Approve"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20BalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20DeployToken"
  ): TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20Name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20Symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20TotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Transfer"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<
    [token: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTotalSupply"
  ): TypedContractMethod<[from: AddressLike], [void], "nonpayable">;

  filters: {};
}
