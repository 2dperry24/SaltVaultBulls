/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SaltVaultTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateToken"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "calculatePrice"
      | "contractFee"
      | "contracts"
      | "customFee"
      | "decimals"
      | "determineFeeForAddress"
      | "feeReceiver"
      | "feeReceiverPercentage"
      | "getValueOfHoldings"
      | "hasCustomFee"
      | "isApprovedCaller"
      | "isCurrentContractFeeExempt"
      | "isReadyForTrdContracts"
      | "isTransferFeeExempt"
      | "mintFee"
      | "mintWithBacking"
      | "name"
      | "non_holder"
      | "owner"
      | "preSaleAmount"
      | "presaleOpen"
      | "presaleToggle"
      | "removeCustomFee"
      | "renounceOwnership"
      | "saltVaultBulls"
      | "sell"
      | "sellDownExternalAccount"
      | "sellFee"
      | "sellTo"
      | "setApprovedCallerRole"
      | "setContract"
      | "setCustomFee"
      | "setFeeReceiver"
      | "setFeeReceiverPercentage"
      | "setFees"
      | "setPresaleAmountBulk"
      | "setPresaleAmountFromApprovedCaller"
      | "setSaltVaultBullsAddress"
      | "setTransferFeeExempt"
      | "setUnderlyingToken"
      | "symbol"
      | "tokenActivated"
      | "totalSupply"
      | "transfer"
      | "transferFee"
      | "transferFrom"
      | "transferOwnership"
      | "underlying"
      | "underlyingBalance"
      | "withdrawNonStableToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "GarbageCollected"
      | "Minted"
      | "OwnershipTransferred"
      | "PriceChange"
      | "Redeemed"
      | "SellDownAccount"
      | "SetContract"
      | "SetFeeReceiver"
      | "SetFeeReceiverPercentage"
      | "SetFees"
      | "SetPermissions"
      | "SetUnderlying"
      | "TokenActivated"
      | "Transfer"
      | "presaleStatus"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateToken",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculatePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "determineFeeForAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiverPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOfHoldings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCustomFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrentContractFeeExempt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyForTrdContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferFeeExempt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mintFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintWithBacking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "non_holder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preSaleAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleToggle",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCustomFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saltVaultBulls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sell", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sellDownExternalAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellTo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedCallerRole",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomFee",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiverPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresaleAmountBulk",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresaleAmountFromApprovedCaller",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaltVaultBullsAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFeeExempt",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNonStableToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "customFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "determineFeeForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiverPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueOfHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCurrentContractFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyForTrdContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "non_holder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preSaleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleToggle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saltVaultBulls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellDownExternalAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedCallerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiverPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPresaleAmountBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresaleAmountFromApprovedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaltVaultBullsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNonStableToken",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    from: AddressLike,
    amountTokensErased: BigNumberish
  ];
  export type OutputTuple = [from: string, amountTokensErased: bigint];
  export interface OutputObject {
    from: string;
    amountTokensErased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GarbageCollectedEvent {
  export type InputTuple = [amountTokensErased: BigNumberish];
  export type OutputTuple = [amountTokensErased: bigint];
  export interface OutputObject {
    amountTokensErased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [recipient: AddressLike, numTokens: BigNumberish];
  export type OutputTuple = [recipient: string, numTokens: bigint];
  export interface OutputObject {
    recipient: string;
    numTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceChangeEvent {
  export type InputTuple = [
    previousPrice: BigNumberish,
    currentPrice: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    previousPrice: bigint,
    currentPrice: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    previousPrice: bigint;
    currentPrice: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    seller: AddressLike,
    amountSVT: BigNumberish,
    amountUSDC: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    amountSVT: bigint,
    amountUSDC: bigint
  ];
  export interface OutputObject {
    seller: string;
    amountSVT: bigint;
    amountUSDC: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellDownAccountEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetContractEvent {
  export type InputTuple = [addr: AddressLike, value: boolean];
  export type OutputTuple = [addr: string, value: boolean];
  export interface OutputObject {
    addr: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeReceiverEvent {
  export type InputTuple = [newReceiver: AddressLike];
  export type OutputTuple = [newReceiver: string];
  export interface OutputObject {
    newReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeReceiverPercentageEvent {
  export type InputTuple = [newPercentage: BigNumberish];
  export type OutputTuple = [newPercentage: bigint];
  export interface OutputObject {
    newPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeesEvent {
  export type InputTuple = [
    mintFee: BigNumberish,
    transferFee: BigNumberish,
    sellFee: BigNumberish,
    contractFee: BigNumberish
  ];
  export type OutputTuple = [
    mintFee: bigint,
    transferFee: bigint,
    sellFee: bigint,
    contractFee: bigint
  ];
  export interface OutputObject {
    mintFee: bigint;
    transferFee: bigint;
    sellFee: bigint;
    contractFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPermissionsEvent {
  export type InputTuple = [Contract: AddressLike, feeExempt: boolean];
  export type OutputTuple = [Contract: string, feeExempt: boolean];
  export interface OutputObject {
    Contract: string;
    feeExempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUnderlyingEvent {
  export type InputTuple = [underlying: AddressLike];
  export type OutputTuple = [underlying: string];
  export interface OutputObject {
    underlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenActivatedEvent {
  export type InputTuple = [blockNo: BigNumberish];
  export type OutputTuple = [blockNo: bigint];
  export interface OutputObject {
    blockNo: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace presaleStatusEvent {
  export type InputTuple = [flag: boolean];
  export type OutputTuple = [flag: boolean];
  export interface OutputObject {
    flag: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SaltVaultToken extends BaseContract {
  connect(runner?: ContractRunner | null): SaltVaultToken;
  waitForDeployment(): Promise<this>;

  interface: SaltVaultTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateToken: TypedContractMethod<[_flag: boolean], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  calculatePrice: TypedContractMethod<[], [bigint], "view">;

  contractFee: TypedContractMethod<[], [bigint], "view">;

  contracts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  customFee: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  determineFeeForAddress: TypedContractMethod<
    [_address: AddressLike],
    [bigint],
    "view"
  >;

  feeReceiver: TypedContractMethod<[], [string], "view">;

  feeReceiverPercentage: TypedContractMethod<[], [bigint], "view">;

  getValueOfHoldings: TypedContractMethod<
    [holder: AddressLike],
    [bigint],
    "view"
  >;

  hasCustomFee: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isApprovedCaller: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isCurrentContractFeeExempt: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  isReadyForTrdContracts: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  isTransferFeeExempt: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  mintFee: TypedContractMethod<[], [bigint], "view">;

  mintWithBacking: TypedContractMethod<
    [numTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  non_holder: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  preSaleAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  presaleOpen: TypedContractMethod<[], [boolean], "view">;

  presaleToggle: TypedContractMethod<[_flag: boolean], [void], "nonpayable">;

  removeCustomFee: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  saltVaultBulls: TypedContractMethod<[], [string], "view">;

  sell: TypedContractMethod<
    [tokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  sellDownExternalAccount: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  sellFee: TypedContractMethod<[], [bigint], "view">;

  sellTo: TypedContractMethod<
    [tokenAmount: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  setApprovedCallerRole: TypedContractMethod<
    [_address: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  setContract: TypedContractMethod<
    [_add: AddressLike, _value: boolean],
    [void],
    "nonpayable"
  >;

  setCustomFee: TypedContractMethod<
    [_address: AddressLike[], _fee: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setFeeReceiver: TypedContractMethod<
    [newReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeReceiverPercentage: TypedContractMethod<
    [newPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [
      _mintFee: BigNumberish,
      _transferFee: BigNumberish,
      _sellFee: BigNumberish,
      _contractFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPresaleAmountBulk: TypedContractMethod<
    [_addresses: AddressLike[], _allocation: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPresaleAmountFromApprovedCaller: TypedContractMethod<
    [_address: AddressLike, _allocation: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSaltVaultBullsAddress: TypedContractMethod<
    [_saltVaultBulls: AddressLike],
    [void],
    "nonpayable"
  >;

  setTransferFeeExempt: TypedContractMethod<
    [Contract: AddressLike, transferFeeExempt: boolean],
    [void],
    "nonpayable"
  >;

  setUnderlyingToken: TypedContractMethod<
    [_underlyingToken: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenActivated: TypedContractMethod<[], [boolean], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFee: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  underlyingBalance: TypedContractMethod<[], [bigint], "view">;

  withdrawNonStableToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateToken"
  ): TypedContractMethod<[_flag: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculatePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "customFee"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "determineFeeForAddress"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeReceiverPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValueOfHoldings"
  ): TypedContractMethod<[holder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasCustomFee"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isApprovedCaller"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCurrentContractFeeExempt"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReadyForTrdContracts"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTransferFeeExempt"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintWithBacking"
  ): TypedContractMethod<[numTokens: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "non_holder"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "preSaleAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "presaleOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "presaleToggle"
  ): TypedContractMethod<[_flag: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeCustomFee"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saltVaultBulls"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<[tokenAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "sellDownExternalAccount"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellTo"
  ): TypedContractMethod<
    [tokenAmount: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovedCallerRole"
  ): TypedContractMethod<
    [_address: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContract"
  ): TypedContractMethod<
    [_add: AddressLike, _value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCustomFee"
  ): TypedContractMethod<
    [_address: AddressLike[], _fee: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeReceiver"
  ): TypedContractMethod<[newReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiverPercentage"
  ): TypedContractMethod<[newPercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [
      _mintFee: BigNumberish,
      _transferFee: BigNumberish,
      _sellFee: BigNumberish,
      _contractFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPresaleAmountBulk"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _allocation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPresaleAmountFromApprovedCaller"
  ): TypedContractMethod<
    [_address: AddressLike, _allocation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaltVaultBullsAddress"
  ): TypedContractMethod<[_saltVaultBulls: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferFeeExempt"
  ): TypedContractMethod<
    [Contract: AddressLike, transferFeeExempt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnderlyingToken"
  ): TypedContractMethod<[_underlyingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenActivated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawNonStableToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "GarbageCollected"
  ): TypedContractEvent<
    GarbageCollectedEvent.InputTuple,
    GarbageCollectedEvent.OutputTuple,
    GarbageCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceChange"
  ): TypedContractEvent<
    PriceChangeEvent.InputTuple,
    PriceChangeEvent.OutputTuple,
    PriceChangeEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "SellDownAccount"
  ): TypedContractEvent<
    SellDownAccountEvent.InputTuple,
    SellDownAccountEvent.OutputTuple,
    SellDownAccountEvent.OutputObject
  >;
  getEvent(
    key: "SetContract"
  ): TypedContractEvent<
    SetContractEvent.InputTuple,
    SetContractEvent.OutputTuple,
    SetContractEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeReceiver"
  ): TypedContractEvent<
    SetFeeReceiverEvent.InputTuple,
    SetFeeReceiverEvent.OutputTuple,
    SetFeeReceiverEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeReceiverPercentage"
  ): TypedContractEvent<
    SetFeeReceiverPercentageEvent.InputTuple,
    SetFeeReceiverPercentageEvent.OutputTuple,
    SetFeeReceiverPercentageEvent.OutputObject
  >;
  getEvent(
    key: "SetFees"
  ): TypedContractEvent<
    SetFeesEvent.InputTuple,
    SetFeesEvent.OutputTuple,
    SetFeesEvent.OutputObject
  >;
  getEvent(
    key: "SetPermissions"
  ): TypedContractEvent<
    SetPermissionsEvent.InputTuple,
    SetPermissionsEvent.OutputTuple,
    SetPermissionsEvent.OutputObject
  >;
  getEvent(
    key: "SetUnderlying"
  ): TypedContractEvent<
    SetUnderlyingEvent.InputTuple,
    SetUnderlyingEvent.OutputTuple,
    SetUnderlyingEvent.OutputObject
  >;
  getEvent(
    key: "TokenActivated"
  ): TypedContractEvent<
    TokenActivatedEvent.InputTuple,
    TokenActivatedEvent.OutputTuple,
    TokenActivatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "presaleStatus"
  ): TypedContractEvent<
    presaleStatusEvent.InputTuple,
    presaleStatusEvent.OutputTuple,
    presaleStatusEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "GarbageCollected(uint256)": TypedContractEvent<
      GarbageCollectedEvent.InputTuple,
      GarbageCollectedEvent.OutputTuple,
      GarbageCollectedEvent.OutputObject
    >;
    GarbageCollected: TypedContractEvent<
      GarbageCollectedEvent.InputTuple,
      GarbageCollectedEvent.OutputTuple,
      GarbageCollectedEvent.OutputObject
    >;

    "Minted(address,uint256)": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceChange(uint256,uint256,uint256)": TypedContractEvent<
      PriceChangeEvent.InputTuple,
      PriceChangeEvent.OutputTuple,
      PriceChangeEvent.OutputObject
    >;
    PriceChange: TypedContractEvent<
      PriceChangeEvent.InputTuple,
      PriceChangeEvent.OutputTuple,
      PriceChangeEvent.OutputObject
    >;

    "Redeemed(address,uint256,uint256)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "SellDownAccount(address)": TypedContractEvent<
      SellDownAccountEvent.InputTuple,
      SellDownAccountEvent.OutputTuple,
      SellDownAccountEvent.OutputObject
    >;
    SellDownAccount: TypedContractEvent<
      SellDownAccountEvent.InputTuple,
      SellDownAccountEvent.OutputTuple,
      SellDownAccountEvent.OutputObject
    >;

    "SetContract(address,bool)": TypedContractEvent<
      SetContractEvent.InputTuple,
      SetContractEvent.OutputTuple,
      SetContractEvent.OutputObject
    >;
    SetContract: TypedContractEvent<
      SetContractEvent.InputTuple,
      SetContractEvent.OutputTuple,
      SetContractEvent.OutputObject
    >;

    "SetFeeReceiver(address)": TypedContractEvent<
      SetFeeReceiverEvent.InputTuple,
      SetFeeReceiverEvent.OutputTuple,
      SetFeeReceiverEvent.OutputObject
    >;
    SetFeeReceiver: TypedContractEvent<
      SetFeeReceiverEvent.InputTuple,
      SetFeeReceiverEvent.OutputTuple,
      SetFeeReceiverEvent.OutputObject
    >;

    "SetFeeReceiverPercentage(uint256)": TypedContractEvent<
      SetFeeReceiverPercentageEvent.InputTuple,
      SetFeeReceiverPercentageEvent.OutputTuple,
      SetFeeReceiverPercentageEvent.OutputObject
    >;
    SetFeeReceiverPercentage: TypedContractEvent<
      SetFeeReceiverPercentageEvent.InputTuple,
      SetFeeReceiverPercentageEvent.OutputTuple,
      SetFeeReceiverPercentageEvent.OutputObject
    >;

    "SetFees(uint256,uint256,uint256,uint256)": TypedContractEvent<
      SetFeesEvent.InputTuple,
      SetFeesEvent.OutputTuple,
      SetFeesEvent.OutputObject
    >;
    SetFees: TypedContractEvent<
      SetFeesEvent.InputTuple,
      SetFeesEvent.OutputTuple,
      SetFeesEvent.OutputObject
    >;

    "SetPermissions(address,bool)": TypedContractEvent<
      SetPermissionsEvent.InputTuple,
      SetPermissionsEvent.OutputTuple,
      SetPermissionsEvent.OutputObject
    >;
    SetPermissions: TypedContractEvent<
      SetPermissionsEvent.InputTuple,
      SetPermissionsEvent.OutputTuple,
      SetPermissionsEvent.OutputObject
    >;

    "SetUnderlying(address)": TypedContractEvent<
      SetUnderlyingEvent.InputTuple,
      SetUnderlyingEvent.OutputTuple,
      SetUnderlyingEvent.OutputObject
    >;
    SetUnderlying: TypedContractEvent<
      SetUnderlyingEvent.InputTuple,
      SetUnderlyingEvent.OutputTuple,
      SetUnderlyingEvent.OutputObject
    >;

    "TokenActivated(uint256)": TypedContractEvent<
      TokenActivatedEvent.InputTuple,
      TokenActivatedEvent.OutputTuple,
      TokenActivatedEvent.OutputObject
    >;
    TokenActivated: TypedContractEvent<
      TokenActivatedEvent.InputTuple,
      TokenActivatedEvent.OutputTuple,
      TokenActivatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "presaleStatus(bool)": TypedContractEvent<
      presaleStatusEvent.InputTuple,
      presaleStatusEvent.OutputTuple,
      presaleStatusEvent.OutputObject
    >;
    presaleStatus: TypedContractEvent<
      presaleStatusEvent.InputTuple,
      presaleStatusEvent.OutputTuple,
      presaleStatusEvent.OutputObject
    >;
  };
}
