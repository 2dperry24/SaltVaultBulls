/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface LibERC721Interface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ERC721NewCollection"
      | "GemTokensMintedWithCredits"
      | "GemTokensMintedWithUsdc"
      | "Transfer"
      | "USDCMint"
      | "WinnerDeclared"
  ): EventFragment;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721NewCollectionEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GemTokensMintedWithCreditsEvent {
  export type InputTuple = [account: AddressLike, totalMints: BigNumberish];
  export type OutputTuple = [account: string, totalMints: bigint];
  export interface OutputObject {
    account: string;
    totalMints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GemTokensMintedWithUsdcEvent {
  export type InputTuple = [
    account: AddressLike,
    totalMints: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    totalMints: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    account: string;
    totalMints: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCMintEvent {
  export type InputTuple = [
    minter: AddressLike,
    quantity: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    minter: string,
    quantity: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    minter: string;
    quantity: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [winner: AddressLike, totalValue: BigNumberish];
  export type OutputTuple = [winner: string, totalValue: bigint];
  export interface OutputObject {
    winner: string;
    totalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LibERC721 extends BaseContract {
  connect(runner?: ContractRunner | null): LibERC721;
  waitForDeployment(): Promise<this>;

  interface: LibERC721Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ERC721NewCollection"
  ): TypedContractEvent<
    ERC721NewCollectionEvent.InputTuple,
    ERC721NewCollectionEvent.OutputTuple,
    ERC721NewCollectionEvent.OutputObject
  >;
  getEvent(
    key: "GemTokensMintedWithCredits"
  ): TypedContractEvent<
    GemTokensMintedWithCreditsEvent.InputTuple,
    GemTokensMintedWithCreditsEvent.OutputTuple,
    GemTokensMintedWithCreditsEvent.OutputObject
  >;
  getEvent(
    key: "GemTokensMintedWithUsdc"
  ): TypedContractEvent<
    GemTokensMintedWithUsdcEvent.InputTuple,
    GemTokensMintedWithUsdcEvent.OutputTuple,
    GemTokensMintedWithUsdcEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "USDCMint"
  ): TypedContractEvent<
    USDCMintEvent.InputTuple,
    USDCMintEvent.OutputTuple,
    USDCMintEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ERC721NewCollection(address)": TypedContractEvent<
      ERC721NewCollectionEvent.InputTuple,
      ERC721NewCollectionEvent.OutputTuple,
      ERC721NewCollectionEvent.OutputObject
    >;
    ERC721NewCollection: TypedContractEvent<
      ERC721NewCollectionEvent.InputTuple,
      ERC721NewCollectionEvent.OutputTuple,
      ERC721NewCollectionEvent.OutputObject
    >;

    "GemTokensMintedWithCredits(address,uint256)": TypedContractEvent<
      GemTokensMintedWithCreditsEvent.InputTuple,
      GemTokensMintedWithCreditsEvent.OutputTuple,
      GemTokensMintedWithCreditsEvent.OutputObject
    >;
    GemTokensMintedWithCredits: TypedContractEvent<
      GemTokensMintedWithCreditsEvent.InputTuple,
      GemTokensMintedWithCreditsEvent.OutputTuple,
      GemTokensMintedWithCreditsEvent.OutputObject
    >;

    "GemTokensMintedWithUsdc(address,uint256,uint256)": TypedContractEvent<
      GemTokensMintedWithUsdcEvent.InputTuple,
      GemTokensMintedWithUsdcEvent.OutputTuple,
      GemTokensMintedWithUsdcEvent.OutputObject
    >;
    GemTokensMintedWithUsdc: TypedContractEvent<
      GemTokensMintedWithUsdcEvent.InputTuple,
      GemTokensMintedWithUsdcEvent.OutputTuple,
      GemTokensMintedWithUsdcEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "USDCMint(address,uint256,uint256)": TypedContractEvent<
      USDCMintEvent.InputTuple,
      USDCMintEvent.OutputTuple,
      USDCMintEvent.OutputObject
    >;
    USDCMint: TypedContractEvent<
      USDCMintEvent.InputTuple,
      USDCMintEvent.OutputTuple,
      USDCMintEvent.OutputObject
    >;

    "WinnerDeclared(address,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
