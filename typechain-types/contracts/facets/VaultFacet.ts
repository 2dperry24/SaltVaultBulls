/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNewVault"
      | "allocateSaltToVault"
      | "depositProfitsAndcalculateVaultRewardPoints"
      | "getCompoundingRateForIndex"
      | "getContinousMonthsCompoundingForIndex"
      | "getDepositedSaltForIndex"
      | "getIsIndexEligibleForBonusDuringSaltDeposit"
      | "rewardVaultIndex"
      | "setCompoundingRate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompoundingRateUpdated"
      | "ProfitsDepositedToVault"
      | "VaultRewardPointsCalculated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addNewVault",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateSaltToVault",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositProfitsAndcalculateVaultRewardPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompoundingRateForIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContinousMonthsCompoundingForIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedSaltForIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsIndexEligibleForBonusDuringSaltDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVaultIndex",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompoundingRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateSaltToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositProfitsAndcalculateVaultRewardPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundingRateForIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContinousMonthsCompoundingForIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedSaltForIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsIndexEligibleForBonusDuringSaltDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardVaultIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompoundingRate",
    data: BytesLike
  ): Result;
}

export namespace CompoundingRateUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    vaultId: BigNumberish,
    compoundingRate: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    vaultId: bigint,
    compoundingRate: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    vaultId: bigint;
    compoundingRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfitsDepositedToVaultEvent {
  export type InputTuple = [
    vaultIndex: BigNumberish,
    startIndex: BigNumberish,
    endIndex: BigNumberish
  ];
  export type OutputTuple = [
    vaultIndex: bigint,
    startIndex: bigint,
    endIndex: bigint
  ];
  export interface OutputObject {
    vaultIndex: bigint;
    startIndex: bigint;
    endIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRewardPointsCalculatedEvent {
  export type InputTuple = [
    vaultIndex: BigNumberish,
    totalRewardPoints: BigNumberish,
    profitAmount: BigNumberish
  ];
  export type OutputTuple = [
    vaultIndex: bigint,
    totalRewardPoints: bigint,
    profitAmount: bigint
  ];
  export interface OutputObject {
    vaultIndex: bigint;
    totalRewardPoints: bigint;
    profitAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultFacet extends BaseContract {
  connect(runner?: ContractRunner | null): VaultFacet;
  waitForDeployment(): Promise<this>;

  interface: VaultFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNewVault: TypedContractMethod<
    [
      vaultName: string,
      walletAddress: AddressLike,
      approvedControlWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  allocateSaltToVault: TypedContractMethod<
    [
      tokenId: BigNumberish,
      vaultIndex: BigNumberish,
      grains: BigNumberish,
      pillars: BigNumberish,
      sheets: BigNumberish,
      cubes: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositProfitsAndcalculateVaultRewardPoints: TypedContractMethod<
    [vaultIndex: BigNumberish, profitAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCompoundingRateForIndex: TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getContinousMonthsCompoundingForIndex: TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getDepositedSaltForIndex: TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getIsIndexEligibleForBonusDuringSaltDeposit: TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [boolean],
    "view"
  >;

  rewardVaultIndex: TypedContractMethod<
    [
      vaultIndex: BigNumberish,
      startIndex: BigNumberish,
      endIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setCompoundingRate: TypedContractMethod<
    [
      tokenId: BigNumberish,
      vaultId: BigNumberish,
      compoundingRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNewVault"
  ): TypedContractMethod<
    [
      vaultName: string,
      walletAddress: AddressLike,
      approvedControlWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allocateSaltToVault"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      vaultIndex: BigNumberish,
      grains: BigNumberish,
      pillars: BigNumberish,
      sheets: BigNumberish,
      cubes: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositProfitsAndcalculateVaultRewardPoints"
  ): TypedContractMethod<
    [vaultIndex: BigNumberish, profitAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCompoundingRateForIndex"
  ): TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContinousMonthsCompoundingForIndex"
  ): TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositedSaltForIndex"
  ): TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIsIndexEligibleForBonusDuringSaltDeposit"
  ): TypedContractMethod<
    [tokenId: BigNumberish, vaultId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardVaultIndex"
  ): TypedContractMethod<
    [
      vaultIndex: BigNumberish,
      startIndex: BigNumberish,
      endIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCompoundingRate"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      vaultId: BigNumberish,
      compoundingRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CompoundingRateUpdated"
  ): TypedContractEvent<
    CompoundingRateUpdatedEvent.InputTuple,
    CompoundingRateUpdatedEvent.OutputTuple,
    CompoundingRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfitsDepositedToVault"
  ): TypedContractEvent<
    ProfitsDepositedToVaultEvent.InputTuple,
    ProfitsDepositedToVaultEvent.OutputTuple,
    ProfitsDepositedToVaultEvent.OutputObject
  >;
  getEvent(
    key: "VaultRewardPointsCalculated"
  ): TypedContractEvent<
    VaultRewardPointsCalculatedEvent.InputTuple,
    VaultRewardPointsCalculatedEvent.OutputTuple,
    VaultRewardPointsCalculatedEvent.OutputObject
  >;

  filters: {
    "CompoundingRateUpdated(uint256,uint256,uint256)": TypedContractEvent<
      CompoundingRateUpdatedEvent.InputTuple,
      CompoundingRateUpdatedEvent.OutputTuple,
      CompoundingRateUpdatedEvent.OutputObject
    >;
    CompoundingRateUpdated: TypedContractEvent<
      CompoundingRateUpdatedEvent.InputTuple,
      CompoundingRateUpdatedEvent.OutputTuple,
      CompoundingRateUpdatedEvent.OutputObject
    >;

    "ProfitsDepositedToVault(uint256,uint256,uint256)": TypedContractEvent<
      ProfitsDepositedToVaultEvent.InputTuple,
      ProfitsDepositedToVaultEvent.OutputTuple,
      ProfitsDepositedToVaultEvent.OutputObject
    >;
    ProfitsDepositedToVault: TypedContractEvent<
      ProfitsDepositedToVaultEvent.InputTuple,
      ProfitsDepositedToVaultEvent.OutputTuple,
      ProfitsDepositedToVaultEvent.OutputObject
    >;

    "VaultRewardPointsCalculated(uint256,uint256,uint256)": TypedContractEvent<
      VaultRewardPointsCalculatedEvent.InputTuple,
      VaultRewardPointsCalculatedEvent.OutputTuple,
      VaultRewardPointsCalculatedEvent.OutputObject
    >;
    VaultRewardPointsCalculated: TypedContractEvent<
      VaultRewardPointsCalculatedEvent.InputTuple,
      VaultRewardPointsCalculatedEvent.OutputTuple,
      VaultRewardPointsCalculatedEvent.OutputObject
    >;
  };
}
