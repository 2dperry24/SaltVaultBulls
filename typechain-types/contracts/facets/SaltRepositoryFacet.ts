/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SaltRepositoryFacetInterface extends Interface {
  getFunction(
    nameOrSignature: "getSaltGrainPurchasePrice" | "purchaseSaltGrains"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SaltGrainsPurchased"): EventFragment;

  encodeFunctionData(
    functionFragment: "getSaltGrainPurchasePrice",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseSaltGrains",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSaltGrainPurchasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseSaltGrains",
    data: BytesLike
  ): Result;
}

export namespace SaltGrainsPurchasedEvent {
  export type InputTuple = [
    nftTokenId: BigNumberish,
    grains: BigNumberish,
    pillars: BigNumberish,
    sheets: BigNumberish,
    cubes: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    nftTokenId: bigint,
    grains: bigint,
    pillars: bigint,
    sheets: bigint,
    cubes: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    nftTokenId: bigint;
    grains: bigint;
    pillars: bigint;
    sheets: bigint;
    cubes: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SaltRepositoryFacet extends BaseContract {
  connect(runner?: ContractRunner | null): SaltRepositoryFacet;
  waitForDeployment(): Promise<this>;

  interface: SaltRepositoryFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getSaltGrainPurchasePrice: TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  purchaseSaltGrains: TypedContractMethod<
    [
      nftTokenId: BigNumberish,
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getSaltGrainPurchasePrice"
  ): TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseSaltGrains"
  ): TypedContractMethod<
    [
      nftTokenId: BigNumberish,
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SaltGrainsPurchased"
  ): TypedContractEvent<
    SaltGrainsPurchasedEvent.InputTuple,
    SaltGrainsPurchasedEvent.OutputTuple,
    SaltGrainsPurchasedEvent.OutputObject
  >;

  filters: {
    "SaltGrainsPurchased(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SaltGrainsPurchasedEvent.InputTuple,
      SaltGrainsPurchasedEvent.OutputTuple,
      SaltGrainsPurchasedEvent.OutputObject
    >;
    SaltGrainsPurchased: TypedContractEvent<
      SaltGrainsPurchasedEvent.InputTuple,
      SaltGrainsPurchasedEvent.OutputTuple,
      SaltGrainsPurchasedEvent.OutputObject
    >;
  };
}
