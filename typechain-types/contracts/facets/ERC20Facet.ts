/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ERC20FacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "erc20Allowance"
      | "erc20Approve"
      | "erc20BalanceOf"
      | "erc20Decimals"
      | "erc20DeployToken"
      | "erc20Name"
      | "erc20Symbol"
      | "erc20TotalSupply"
      | "erc20Transfer"
      | "mintToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20Approval"
      | "ERC20Minted"
      | "ERC20NewToken"
      | "ERC20Transferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "erc20Allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Approve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20BalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Decimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20DeployToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "erc20Name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Symbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Transfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20Allowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20BalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20DeployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Symbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
}

export namespace ERC20ApprovalEvent {
  export type InputTuple = [
    token: AddressLike,
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    owner: string,
    spender: string,
    value: bigint
  ];
  export interface OutputObject {
    token: string;
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20MintedEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20NewTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20TransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    value: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20Facet extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20Facet;
  waitForDeployment(): Promise<this>;

  interface: ERC20FacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  erc20Allowance: TypedContractMethod<
    [account: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  erc20Approve: TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc20BalanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  erc20Decimals: TypedContractMethod<[], [bigint], "view">;

  erc20DeployToken: TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc20Name: TypedContractMethod<[], [string], "view">;

  erc20Symbol: TypedContractMethod<[], [string], "view">;

  erc20TotalSupply: TypedContractMethod<[], [bigint], "view">;

  erc20Transfer: TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintToken: TypedContractMethod<
    [token: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "erc20Allowance"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc20Approve"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20BalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20DeployToken"
  ): TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20Name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20Symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20TotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Transfer"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<
    [token: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ERC20Approval"
  ): TypedContractEvent<
    ERC20ApprovalEvent.InputTuple,
    ERC20ApprovalEvent.OutputTuple,
    ERC20ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Minted"
  ): TypedContractEvent<
    ERC20MintedEvent.InputTuple,
    ERC20MintedEvent.OutputTuple,
    ERC20MintedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20NewToken"
  ): TypedContractEvent<
    ERC20NewTokenEvent.InputTuple,
    ERC20NewTokenEvent.OutputTuple,
    ERC20NewTokenEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Transferred"
  ): TypedContractEvent<
    ERC20TransferredEvent.InputTuple,
    ERC20TransferredEvent.OutputTuple,
    ERC20TransferredEvent.OutputObject
  >;

  filters: {
    "ERC20Approval(address,address,address,uint256)": TypedContractEvent<
      ERC20ApprovalEvent.InputTuple,
      ERC20ApprovalEvent.OutputTuple,
      ERC20ApprovalEvent.OutputObject
    >;
    ERC20Approval: TypedContractEvent<
      ERC20ApprovalEvent.InputTuple,
      ERC20ApprovalEvent.OutputTuple,
      ERC20ApprovalEvent.OutputObject
    >;

    "ERC20Minted(address,address,uint256)": TypedContractEvent<
      ERC20MintedEvent.InputTuple,
      ERC20MintedEvent.OutputTuple,
      ERC20MintedEvent.OutputObject
    >;
    ERC20Minted: TypedContractEvent<
      ERC20MintedEvent.InputTuple,
      ERC20MintedEvent.OutputTuple,
      ERC20MintedEvent.OutputObject
    >;

    "ERC20NewToken(address)": TypedContractEvent<
      ERC20NewTokenEvent.InputTuple,
      ERC20NewTokenEvent.OutputTuple,
      ERC20NewTokenEvent.OutputObject
    >;
    ERC20NewToken: TypedContractEvent<
      ERC20NewTokenEvent.InputTuple,
      ERC20NewTokenEvent.OutputTuple,
      ERC20NewTokenEvent.OutputObject
    >;

    "ERC20Transferred(address,address,address,uint256)": TypedContractEvent<
      ERC20TransferredEvent.InputTuple,
      ERC20TransferredEvent.OutputTuple,
      ERC20TransferredEvent.OutputObject
    >;
    ERC20Transferred: TypedContractEvent<
      ERC20TransferredEvent.InputTuple,
      ERC20TransferredEvent.OutputTuple,
      ERC20TransferredEvent.OutputObject
    >;
  };
}
