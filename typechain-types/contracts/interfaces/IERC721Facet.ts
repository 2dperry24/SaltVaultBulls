/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibSharedStructs {
  export type IndividualApprovalRecordStruct = {
    tokenId: BigNumberish;
    approved: AddressLike;
    timestamp: BigNumberish;
    isApprovalActive: boolean;
  };

  export type IndividualApprovalRecordStructOutput = [
    tokenId: bigint,
    approved: string,
    timestamp: bigint,
    isApprovalActive: boolean
  ] & {
    tokenId: bigint;
    approved: string;
    timestamp: bigint;
    isApprovalActive: boolean;
  };

  export type OperatorApprovalRecordStruct = {
    operator: AddressLike;
    timestamp: BigNumberish;
    isApprovalActive: boolean;
  };

  export type OperatorApprovalRecordStructOutput = [
    operator: string,
    timestamp: bigint,
    isApprovalActive: boolean
  ] & { operator: string; timestamp: bigint; isApprovalActive: boolean };
}

export interface IERC721FacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "erc721approve"
      | "erc721balanceOf"
      | "erc721baseExtension"
      | "erc721baseURI"
      | "erc721getApprovalHistory"
      | "erc721getApproved"
      | "erc721getAvailableFreeGemTokenMints"
      | "erc721getWalletsForExternalContract"
      | "erc721isApprovedForAll"
      | "erc721mintGemTokens"
      | "erc721mintingLive"
      | "erc721name"
      | "erc721ownerOf"
      | "erc721safeTransferFrom(address,address,address,uint256,bytes)"
      | "erc721safeTransferFrom(address,address,address,uint256)"
      | "erc721setApprovalForAll"
      | "erc721setBaseUri"
      | "erc721setBullsContractAddress"
      | "erc721setCollection"
      | "erc721setGemTokenContractAddress"
      | "erc721setMintingLive"
      | "erc721symbol"
      | "erc721tokenOfOwnerByIndex"
      | "erc721tokenURI"
      | "erc721totalSupply"
      | "erc721transferFrom"
      | "erc721walletOfOwner"
      | "getCostAndMintEligibilityOfBulls"
      | "getCostAndMintEligibilityOfGemTokens"
      | "isExternalContractApprovedForERC721Minting"
      | "mintBull"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "erc721approve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721baseExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721baseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721getApprovalHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721getAvailableFreeGemTokenMints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721getWalletsForExternalContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721mintGemTokens",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721mintingLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721name",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721safeTransferFrom(address,address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721safeTransferFrom(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721setApprovalForAll",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721setBaseUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721setBullsContractAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721setCollection",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721setGemTokenContractAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721setMintingLive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721symbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721transferFrom",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721walletOfOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCostAndMintEligibilityOfBulls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCostAndMintEligibilityOfGemTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExternalContractApprovedForERC721Minting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBull",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc721approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721balanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721baseExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721baseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721getApprovalHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721getAvailableFreeGemTokenMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721getWalletsForExternalContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721mintGemTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721mintingLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc721name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc721ownerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721safeTransferFrom(address,address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721safeTransferFrom(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721setBaseUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721setBullsContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721setCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721setGemTokenContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721setMintingLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721symbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721tokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721walletOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCostAndMintEligibilityOfBulls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCostAndMintEligibilityOfGemTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExternalContractApprovedForERC721Minting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBull", data: BytesLike): Result;
}

export interface IERC721Facet extends BaseContract {
  connect(runner?: ContractRunner | null): IERC721Facet;
  waitForDeployment(): Promise<this>;

  interface: IERC721FacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  erc721approve: TypedContractMethod<
    [auth: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc721balanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  erc721baseExtension: TypedContractMethod<[], [string], "view">;

  erc721baseURI: TypedContractMethod<[], [string], "view">;

  erc721getApprovalHistory: TypedContractMethod<
    [owner: AddressLike],
    [
      [
        LibSharedStructs.IndividualApprovalRecordStructOutput[],
        LibSharedStructs.OperatorApprovalRecordStructOutput[]
      ] & {
        individualApprovals: LibSharedStructs.IndividualApprovalRecordStructOutput[];
        operatorApprovals: LibSharedStructs.OperatorApprovalRecordStructOutput[];
      }
    ],
    "view"
  >;

  erc721getApproved: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  erc721getAvailableFreeGemTokenMints: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  erc721getWalletsForExternalContract: TypedContractMethod<
    [],
    [[string, string, string]],
    "view"
  >;

  erc721isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  erc721mintGemTokens: TypedContractMethod<
    [
      _addressToMintTo: AddressLike,
      _numberOfCreditsToUse: BigNumberish,
      _totalMintCost: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  erc721mintingLive: TypedContractMethod<[], [boolean], "view">;

  erc721name: TypedContractMethod<[], [string], "view">;

  erc721ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "erc721safeTransferFrom(address,address,address,uint256,bytes)": TypedContractMethod<
    [
      auth: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "erc721safeTransferFrom(address,address,address,uint256)": TypedContractMethod<
    [
      auth: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  erc721setApprovalForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  erc721setBaseUri: TypedContractMethod<
    [_newBaseURI: string],
    [void],
    "nonpayable"
  >;

  erc721setBullsContractAddress: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  erc721setCollection: TypedContractMethod<
    [name: string, symbol: string, baseURI: string, baseExtension: string],
    [void],
    "nonpayable"
  >;

  erc721setGemTokenContractAddress: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  erc721setMintingLive: TypedContractMethod<
    [_bool: boolean],
    [void],
    "nonpayable"
  >;

  erc721symbol: TypedContractMethod<[], [string], "view">;

  erc721tokenOfOwnerByIndex: TypedContractMethod<
    [_owner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  erc721tokenURI: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  erc721totalSupply: TypedContractMethod<[], [bigint], "view">;

  erc721transferFrom: TypedContractMethod<
    [
      auth: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  erc721walletOfOwner: TypedContractMethod<
    [_owner: AddressLike],
    [bigint[]],
    "view"
  >;

  getCostAndMintEligibilityOfBulls: TypedContractMethod<
    [_rarity: BigNumberish],
    [bigint],
    "view"
  >;

  getCostAndMintEligibilityOfGemTokens: TypedContractMethod<
    [_quantity: BigNumberish],
    [bigint],
    "view"
  >;

  isExternalContractApprovedForERC721Minting: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  mintBull: TypedContractMethod<
    [rarity: BigNumberish, minter: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "erc721approve"
  ): TypedContractMethod<
    [auth: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc721baseExtension"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc721baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc721getApprovalHistory"
  ): TypedContractMethod<
    [owner: AddressLike],
    [
      [
        LibSharedStructs.IndividualApprovalRecordStructOutput[],
        LibSharedStructs.OperatorApprovalRecordStructOutput[]
      ] & {
        individualApprovals: LibSharedStructs.IndividualApprovalRecordStructOutput[];
        operatorApprovals: LibSharedStructs.OperatorApprovalRecordStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc721getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "erc721getAvailableFreeGemTokenMints"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc721getWalletsForExternalContract"
  ): TypedContractMethod<[], [[string, string, string]], "view">;
  getFunction(
    nameOrSignature: "erc721isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc721mintGemTokens"
  ): TypedContractMethod<
    [
      _addressToMintTo: AddressLike,
      _numberOfCreditsToUse: BigNumberish,
      _totalMintCost: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721mintingLive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "erc721name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc721ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "erc721safeTransferFrom(address,address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      auth: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721safeTransferFrom(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      auth: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721setApprovalForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721setBaseUri"
  ): TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc721setBullsContractAddress"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc721setCollection"
  ): TypedContractMethod<
    [name: string, symbol: string, baseURI: string, baseExtension: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721setGemTokenContractAddress"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc721setMintingLive"
  ): TypedContractMethod<[_bool: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc721symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc721tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [_owner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc721tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "erc721totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc721transferFrom"
  ): TypedContractMethod<
    [
      auth: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc721walletOfOwner"
  ): TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCostAndMintEligibilityOfBulls"
  ): TypedContractMethod<[_rarity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCostAndMintEligibilityOfGemTokens"
  ): TypedContractMethod<[_quantity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isExternalContractApprovedForERC721Minting"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintBull"
  ): TypedContractMethod<
    [rarity: BigNumberish, minter: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
